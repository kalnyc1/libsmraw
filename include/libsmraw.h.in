/*
 * Library to support the storage media (SM) RAW format
 *
 * Copyright (c) 2010, Joachim Metz <jbmetz@users.sourceforge.net>
 *
 * Refer to AUTHORS for acknowledgements.
 *
 * This software is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this software.  If not, see <http://www.gnu.org/licenses/>.
 */

#if !defined( _LIBSMRAW_H )
#define _LIBSMRAW_H

#include <libsmraw/codepage.h>
#include <libsmraw/definitions.h>
#include <libsmraw/error.h>
#include <libsmraw/extern.h>
#include <libsmraw/features.h>
#include <libsmraw/types.h>

#include <stdio.h>

#if defined( LIBSMRAW_HAVE_BFIO )
#include <libbfio.h>
#endif

#if defined( __cplusplus )
extern "C" {
#endif

/* -------------------------------------------------------------------------
 * Support functions
 * ------------------------------------------------------------------------- */

/* Returns the library version
 */
LIBSMRAW_EXTERN const char *libsmraw_get_version(
                             void );

/* Retrieves the narrow system string codepage
 * A value of 0 represents no codepage, UTF-8 encoding is used instead
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_get_codepage(
                     int *codepage,
                     libsmraw_error_t **error );

/* Sets the narrow system string codepage
 * A value of 0 represents no codepage, UTF-8 encoding is used instead
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_set_codepage(
                     int codepage,
                     libsmraw_error_t **error );

/* Globs the files according to common (split) RAW naming schemas
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_glob(
                     const char *filename,
                     size_t filename_length,
                     char **filenames[],
                     int *number_of_filenames,
                     libsmraw_error_t **error );

/* Frees the globbed filenames
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_glob_free(
                     char *filenames[],
                     int number_of_filenames,
                     libsmraw_error_t **error );

#if defined( HAVE_WIDE_CHARACTER_TYPE )
/* Globs the files according to common (split) RAW naming schemas
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_glob_wide(
                     const wchar_t *filename,
                     size_t filename_length,
                     wchar_t **filenames[],
                     int *number_of_filenames,
                     libsmraw_error_t **error );

/* Frees the globbed wide filenames
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_glob_wide_free(
                     wchar_t *filenames[],
                     int number_of_filenames,
                     libsmraw_error_t **error );
#endif

/* -------------------------------------------------------------------------
 * Notify functions
 * ------------------------------------------------------------------------- */

/* Sets the verbose notification
 */
LIBSMRAW_EXTERN void libsmraw_notify_set_verbose(
                      int verbose );

/* Sets the notification stream
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_notify_set_stream(
                     FILE *stream,
                     libsmraw_error_t **error );

/* Opens the notification stream using a filename
 * The stream is opened in append mode
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_notify_stream_open(
                     const char *filename,
                     libsmraw_error_t **error );

/* Closes the notification stream if opened using a filename
 * Returns 0 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_notify_stream_close(
                     libsmraw_error_t **error );

/* -------------------------------------------------------------------------
 * Error functions
 * ------------------------------------------------------------------------- */

/* Frees the error including elements
 */
LIBSMRAW_EXTERN void libsmraw_error_free(
                      libsmraw_error_t **error );

/* Prints a descriptive string of the error to the stream
 * Returns the number of printed characters if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_error_fprint(
                     libsmraw_error_t *error,
                     FILE *stream );

/* Prints a descriptive string of the error to the string
 * Returns the number of printed characters if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_error_sprint(
                     libsmraw_error_t *error,
                     char *string,
                     size_t size );

/* Prints a backtrace of the error to the stream
 * Returns the number of printed characters if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_error_backtrace_fprint(
                     libsmraw_error_t *error,
                     FILE *stream );

/* Prints a backtrace of the error to the string
 * Returns the number of printed characters if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_error_backtrace_sprint(
                     libsmraw_error_t *error,
                     char *string,
                     size_t size );

/* -------------------------------------------------------------------------
 * Handle functions
 * ------------------------------------------------------------------------- */

/* Initializes the handle
 * Make sure the value handle is pointing to is set to NULL
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_initialize(
                     libsmraw_handle_t **handle,
                     libsmraw_error_t **error );

/* Frees the handle
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_free(
                     libsmraw_handle_t **handle,
                     libsmraw_error_t **error );

/* Signals the handle to abort its current activity
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_signal_abort(
                     libsmraw_handle_t *handle,
                     libsmraw_error_t **error );

/* Opens a set of storage media RAW files
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_open(
                     libsmraw_handle_t *handle,
                     char * const filenames[],
                     int number_of_filenames,
                     uint8_t flags,
                     libsmraw_error_t **error );

#if defined( LIBSMRAW_HAVE_WIDE_CHARACTER_TYPE )
/* Opens a set of storage media RAW files
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_open_wide(
                     libsmraw_handle_t *handle,
                     wchar_t * const filenames[],
                     int number_of_filenames,
                     uint8_t flags,
                     libsmraw_error_t **error );
#endif

#if defined( LIBSMRAW_HAVE_BFIO )
/* Opens a set of storage media RAW files using a Basic File IO (bfio) pool
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_open_file_io_pool(
                     libsmraw_handle_t *handle,
                     libbfio_pool_t *file_io_pool,
                     uint8_t flags,
                     libsmraw_error_t **error );
#endif

/* Closes the handle
 * Returns the 0 if succesful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_close(
                     libsmraw_handle_t *handle,
                     libsmraw_error_t **error );

/* Reads a buffer from the handle
 * Returns the number of bytes read or -1 on error
 */
LIBSMRAW_EXTERN ssize_t libsmraw_handle_read_buffer(
                         libsmraw_handle_t *handle,
                         void *buffer,
                         size_t buffer_size,
                         libsmraw_error_t **error );

/* Writes a buffer to the handle
 * Returns the number of bytes written or -1 on error
 */
LIBSMRAW_EXTERN ssize_t libsmraw_handle_write_buffer(
                         libsmraw_handle_t *handle,
                         void *buffer,
                         size_t buffer_size,
                         libsmraw_error_t **error );

/* Seeks an offset in the handle
 * Returns the number of bytes in the buffer or -1 on error
 */
LIBSMRAW_EXTERN off64_t libsmraw_handle_seek_offset(
                         libsmraw_handle_t *handle,
                         off64_t offset,
                         int whence,
                         libsmraw_error_t **error );

/* Retrieves the current offset of the (media) data
 * Returns the offset if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_offset(
                     libsmraw_handle_t *handle,
                     off64_t *offset,
                     libsmraw_error_t **error );

/* Sets the maximum number of (concurrent) open file handles
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_set_maximum_number_of_open_handles(
                     libsmraw_handle_t *handle,
                     int maximum_number_of_open_handles,
                     libsmraw_error_t **error );

/* Retrieves the segment filename size
 * The filename size includes the end of string character
 * Returns 1 if successful, 0 if value not present or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_segment_filename_size(
                     libsmraw_handle_t *handle,
                     size_t *filename_size,
                     libsmraw_error_t **error );

/* Retrieves the segment filename
 * The filename size should include the end of string character
 * Returns 1 if successful, 0 if value not present or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_segment_filename(
                     libsmraw_handle_t *handle,
                     char *filename,
                     size_t filename_size,
                     libsmraw_error_t **error );

/* Sets the segment filename
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_set_segment_filename(
                     libsmraw_handle_t *handle,
                     const char *filename,
                     size_t filename_length,
                     libsmraw_error_t **error );

#if defined( LIBSMRAW_HAVE_WIDE_CHARACTER_TYPE )
/* Retrieves the segment filename size
 * The filename size includes the end of string character
 * Returns 1 if successful, 0 if value not present or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_segment_filename_size_wide(
                     libsmraw_handle_t *handle,
                     size_t *filename_size,
                     libsmraw_error_t **error );

/* Retrieves the segment filename
 * The filename size should include the end of string character
 * Returns 1 if successful, 0 if value not present or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_segment_filename_wide(
                     libsmraw_handle_t *handle,
                     wchar_t *filename,
                     size_t filename_size,
                     libsmraw_error_t **error );

/* Sets the segment filename
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_set_segment_filename_wide(
                     libsmraw_handle_t *handle,
                     const wchar_t *filename,
                     size_t filename_length,
                     libsmraw_error_t **error );
#endif

/* Retrieves the maximum segment file size
 * 0 represents the maximum possible segment file size
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_maximum_segment_size(
                     libsmraw_handle_t *handle,
                     size64_t *maximum_segment_size,
                     libsmraw_error_t **error );

/* Sets the segment file size
 * 0 represents the maximum possible segment file size
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_set_maximum_segment_size(
                     libsmraw_handle_t *handle,
                     size64_t maximum_segment_size,
                     libsmraw_error_t **error );

/* Retrieves the filename size of the segment file of the current offset
 * The filename size includes the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_filename_size(
                     libsmraw_handle_t *handle,
                     size_t *filename_size,
                     libsmraw_error_t **error );

/* Retrieves the filename of the segment file of the current offset
 * The filename size should include the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_filename(
                     libsmraw_handle_t *handle,
                     char *filename,
                     size_t filename_size,
                     libsmraw_error_t **error );

#if defined( LIBSMRAW_HAVE_WIDE_CHARACTER_TYPE )
/* Retrieves the filename size of the segment file of the current offset
 * The filename size includes the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_filename_size_wide(
                     libsmraw_handle_t *handle,
                     size_t *filename_size,
                     libsmraw_error_t **error );

/* Retrieves the filename of the segment file of the current offset
 * The filename size should include the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_filename_wide(
                     libsmraw_handle_t *handle,
                     wchar_t *filename,
                     size_t filename_size,
                     libsmraw_error_t **error );
#endif

#if defined( LIBSMRAW_HAVE_BFIO )
/* Retrieves the file io handle of the segment file of the current offset
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_file_io_handle(
                     libsmraw_handle_t *handle,
                     libbfio_handle_t **file_io_handle,
                     libsmraw_error_t **error );
#endif

/* -------------------------------------------------------------------------
 * Handle functions - deprecated
 * ------------------------------------------------------------------------- */

/* Sets the maximum amount of (concurrent) open file handles
 * Returns 1 if successful or -1 on error
 *
 * This function is deprecated use libsmraw_handle_set_maximum_number_of_open_handles instead
 */
LIBSMRAW_DEPRECATED \
LIBSMRAW_EXTERN int libsmraw_handle_set_maximum_amount_of_open_handles(
                     libsmraw_handle_t *handle,
                     int maximum_amount_of_open_handles,
                     libsmraw_error_t **error );

/* -------------------------------------------------------------------------
 * Meta data functions
 * ------------------------------------------------------------------------- */

/* Retrieves the media size
 * Returns the 1 if succesful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_media_size(
                     libsmraw_handle_t *handle,
                     size64_t *media_size,
                     libsmraw_error_t **error );

/* Sets the media size
 * Returns the 1 if succesful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_set_media_size(
                     libsmraw_handle_t *handle,
                     size64_t media_size,
                     libsmraw_error_t **error );

/* Retrieves the number of bytes per sector
 * Returns the 1 if succesful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_bytes_per_sector(
                     libsmraw_handle_t *handle,
                     uint32_t *bytes_per_sector,
                     libsmraw_error_t **error );

/* Sets the number of bytes per sector
 * Returns the 1 if succesful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_set_bytes_per_sector(
                     libsmraw_handle_t *handle,
                     uint32_t bytes_per_sector,
                     libsmraw_error_t **error );

/* Retrieves the media type
 * Returns the 1 if succesful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_media_type(
                     libsmraw_handle_t *handle,
                     uint8_t *media_type,
                     libsmraw_error_t **error );

/* Sets the media type
 * Returns the 1 if succesful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_set_media_type(
                     libsmraw_handle_t *handle,
                     uint8_t media_type,
                     libsmraw_error_t **error );

/* Retrieves the media flags
 * Returns the 1 if succesful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_media_flags(
                     libsmraw_handle_t *handle,
                     uint8_t *media_flags,
                     libsmraw_error_t **error );

/* Sets the media flags
 * Returns the 1 if succesful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_set_media_flags(
                     libsmraw_handle_t *handle,
                     uint8_t media_flags,
                     libsmraw_error_t **error );

/* Retrieves the number of information values
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_number_of_information_values(
                     libsmraw_handle_t *handle,
                     int *number_of_information_values,
                     libsmraw_error_t **error );

/* Retrieves the size of a specific information value identifier
 * The identifier size includes the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_information_value_identifier_size(
                     libsmraw_handle_t *handle,
                     int information_value_index,
                     size_t *identifier_size,
                     libsmraw_error_t **error );

/* Retrieves a specific information value identifier
 * The identifier size should include the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_information_value_identifier(
                     libsmraw_handle_t *handle,
                     int information_value_index,
                     char *identifier,
                     size_t identifier_size,
                     libsmraw_error_t **error );

/* Retrieves the size of an UTF-8 encoded information value for the specific identifier
 * The value size includes the end of string character
 * Returns 1 if successful, 0 if value not present or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_utf8_information_value_size(
                     libsmraw_handle_t *handle,
                     const char *identifier,
                     size_t identifier_length,
                     size_t *utf8_string_size,
                     libsmraw_error_t **error );

/* Retrieves an UTF-8 encoded information value for the specific identifier
 * The value size should include the end of string character
 * Returns 1 if successful, 0 if value not present or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_utf8_information_value(
                     libsmraw_handle_t *handle,
                     const char *identifier,
                     size_t identifier_length,
                     uint8_t *utf8_string,
                     size_t utf8_string_size,
                     libsmraw_error_t **error );

/* Sets an UTF-8 encoded information value for the specific identifier
 * Returns the 1 if succesful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_set_utf8_information_value(
                     libsmraw_handle_t *handle,
                     const char *identifier,
                     size_t identifier_length,
                     const uint8_t *utf8_string,
                     size_t utf8_string_length,
                     libsmraw_error_t **error );

/* Retrieves the number of integrity hash values
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_number_of_integrity_hash_values(
                     libsmraw_handle_t *handle,
                     int *number_of_integrity_hash_values,
                     libsmraw_error_t **error );

/* Retrieves the size of a specific integrity hash value identifier
 * The identifier size includes the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_integrity_hash_value_identifier_size(
                     libsmraw_handle_t *handle,
                     int integrity_hash_value_index,
                     size_t *identifier_size,
                     libsmraw_error_t **error );

/* Retrieves a specific integrity hash value identifier
 * The identifier size should include the end of string character
 * Returns 1 if successful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_integrity_hash_value_identifier(
                     libsmraw_handle_t *handle,
                     int integrity_hash_value_index,
                     char *identifier,
                     size_t identifier_length,
                     libsmraw_error_t **error );

/* Retrieves the size of an UTF-8 encoded integrity hash value for the specific identifier
 * The value size includes the end of string character
 * Returns 1 if successful, 0 if value not present or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_utf8_integrity_hash_value_size(
                     libsmraw_handle_t *handle,
                     const char *identifier,
                     size_t identifier_length,
                     size_t *utf8_string_size,
                     libsmraw_error_t **error );

/* Retrieves an UTF-8 encoded integrity hash value for the specific identifier
 * The value size should include the end of string character
 * Returns 1 if successful, 0 if value not present or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_get_utf8_integrity_hash_value(
                     libsmraw_handle_t *handle,
                     const char *identifier,
                     size_t identifier_length,
                     uint8_t *utf8_string,
                     size_t utf8_string_size,
                     libsmraw_error_t **error );

/* Sets an UTF-8 encoded integrity hash value for the specific identifier
 * Returns the 1 if succesful or -1 on error
 */
LIBSMRAW_EXTERN int libsmraw_handle_set_utf8_integrity_hash_value(
                     libsmraw_handle_t *handle,
                     const char *identifier,
                     size_t identifier_length,
                     const uint8_t *utf8_string,
                     size_t utf8_string_length,
                     libsmraw_error_t **error );

/* -------------------------------------------------------------------------
 * Meta data functions - deprecated
 * ------------------------------------------------------------------------- */

/* Retrieves the amount of information values
 * Returns 1 if successful or -1 on error
 *
 * This function is deprecated use libsmraw_handle_get_number_of_information_values instead
 */
LIBSMRAW_DEPRECATED \
LIBSMRAW_EXTERN int libsmraw_handle_get_amount_of_information_values(
                     libsmraw_handle_t *handle,
                     int *amount_of_information_values,
                     libsmraw_error_t **error );

/* Retrieves an information value size
 * The value size includes the end of string character
 * Returns 1 if successful, 0 if value not present or -1 on error
 *
 * This function is deprecated use libsmraw_handle_get_utf8_information_value_size instead
 */
LIBSMRAW_DEPRECATED \
LIBSMRAW_EXTERN int libsmraw_handle_get_information_value_size(
                     libsmraw_handle_t *handle,
                     const uint8_t *identifier,
                     size_t identifier_length,
                     size_t *value_size,
                     libsmraw_error_t **error );

/* Retrieves an information value
 * The strings are encoded in UTF-8
 * The value size should include the end of string character
 * Returns 1 if successful, 0 if value not present or -1 on error
 *
 * This function is deprecated use libsmraw_handle_get_utf8_information_value instead
 */
LIBSMRAW_DEPRECATED \
LIBSMRAW_EXTERN int libsmraw_handle_get_information_value(
                     libsmraw_handle_t *handle,
                     const uint8_t *identifier,
                     size_t identifier_length,
                     uint8_t *value,
                     size_t value_size,
                     libsmraw_error_t **error );

/* Sets an information value
 * The strings are encoded in UTF-8
 * Returns the 1 if succesful or -1 on error
 *
 * This function is deprecated use libsmraw_handle_set_utf8_information_value instead
 */
LIBSMRAW_DEPRECATED \
LIBSMRAW_EXTERN int libsmraw_handle_set_information_value(
                     libsmraw_handle_t *handle,
                     const uint8_t *identifier,
                     size_t identifier_length,
                     const uint8_t *value,
                     size_t value_length,
                     libsmraw_error_t **error );

/* Retrieves the amount of integrity hash values
 * Returns 1 if successful or -1 on error
 *
 * This function is deprecated use libsmraw_handle_get_amount_of_integrity_hash_values instead
 */
LIBSMRAW_DEPRECATED \
LIBSMRAW_EXTERN int libsmraw_handle_get_amount_of_integrity_hash_values(
                     libsmraw_handle_t *handle,
                     int *amount_of_integrity_hash_values,
                     libsmraw_error_t **error );

/* Retrieves an integrity hash value size
 * The value size includes the end of string character
 * Returns 1 if successful, 0 if value not present or -1 on error
 *
 * This function is deprecated use libsmraw_handle_get_utf8_integrity_hash_value_size instead
 */
LIBSMRAW_DEPRECATED \
LIBSMRAW_EXTERN int libsmraw_handle_get_integrity_hash_value_size(
                     libsmraw_handle_t *handle,
                     const uint8_t *identifier,
                     size_t identifier_length,
                     size_t *value_size,
                     libsmraw_error_t **error );

/* Retrieves an integrity hash value
 * The strings are encoded in UTF-8
 * The value size should include the end of string character
 * Returns 1 if successful, 0 if value not present or -1 on error
 *
 * This function is deprecated use libsmraw_handle_get_utf8_integrity_hash_value instead
 */
LIBSMRAW_DEPRECATED \
LIBSMRAW_EXTERN int libsmraw_handle_get_integrity_hash_value(
                     libsmraw_handle_t *handle,
                     const uint8_t *identifier,
                     size_t identifier_length,
                     uint8_t *value,
                     size_t value_size,
                     libsmraw_error_t **error );

/* Sets an integrity hash value
 * The strings are encoded in UTF-8
 * Returns the 1 if succesful or -1 on error
 *
 * This function is deprecated use libsmraw_handle_set_utf8_integrity_hash_value instead
 */
LIBSMRAW_DEPRECATED \
LIBSMRAW_EXTERN int libsmraw_handle_set_integrity_hash_value(
                     libsmraw_handle_t *handle,
                     const uint8_t *identifier,
                     size_t identifier_length,
                     const uint8_t *value,
                     size_t value_length,
                     libsmraw_error_t **error );
#if defined( __cplusplus )
}
#endif

#endif

